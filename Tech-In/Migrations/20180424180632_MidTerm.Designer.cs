// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Tech_In.Data;
using Tech_In.Models.Model;

namespace Tech_In.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180424180632_MidTerm")]
    partial class MidTerm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tech_In.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Tech_In.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName")
                        .HasMaxLength(50);

                    b.Property<int>("CountryID");

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tech_In.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CountryPhoneCode")
                        .HasMaxLength(5);

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Tech_In.Models.Database.SkillTag", b =>
                {
                    b.Property<int>("SkillTagID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedByUserId");

                    b.Property<bool>("ApprovedStatus");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("TimeApproved");

                    b.HasKey("SkillTagID");

                    b.ToTable("skillTags");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserCertification", b =>
                {
                    b.Property<int>("UserCertificationID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CertificationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("LiscenceNo")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("URL");

                    b.Property<string>("UserID");

                    b.HasKey("UserCertificationID");

                    b.ToTable("UserCertifications");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAComment", b =>
                {
                    b.Property<int>("UserQACommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerUserQAnswerID");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAnswer");

                    b.Property<int?>("QuestionUserQuestionID");

                    b.Property<int>("UserID");

                    b.Property<bool>("Visibility");

                    b.HasKey("UserQACommentID");

                    b.HasIndex("AnswerUserQAnswerID");

                    b.HasIndex("QuestionUserQuestionID");

                    b.ToTable("UserQAComments");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAnswer", b =>
                {
                    b.Property<int>("UserQAnswerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("PostTime");

                    b.Property<int>("QuestionID");

                    b.Property<string>("UserID");

                    b.HasKey("UserQAnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("UserQAnswers");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAVoting", b =>
                {
                    b.Property<int>("UserQAVotingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerUserQAnswerID");

                    b.Property<bool>("IsAnswer");

                    b.Property<int?>("QuestionUserQuestionID");

                    b.Property<int>("UserID");

                    b.Property<int>("Value");

                    b.Property<bool>("Visibility");

                    b.HasKey("UserQAVotingID");

                    b.HasIndex("AnswerUserQAnswerID");

                    b.HasIndex("QuestionUserQuestionID");

                    b.ToTable("UserQAVotings");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQuestion", b =>
                {
                    b.Property<int>("UserQuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserID");

                    b.HasKey("UserQuestionID");

                    b.ToTable("UserQuestions");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserSkill", b =>
                {
                    b.Property<string>("UserSkillID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SkillTagID");

                    b.Property<string>("UserID");

                    b.HasKey("UserSkillID");

                    b.HasIndex("SkillTagID");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserEducation", b =>
                {
                    b.Property<int>("UserEducationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityID");

                    b.Property<bool>("CurrentStatusCheck");

                    b.Property<string>("Details")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserID");

                    b.HasKey("UserEducationID");

                    b.HasIndex("CityID");

                    b.ToTable("UserEducations");
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserExperience", b =>
                {
                    b.Property<int>("UserExperienceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100);

                    b.Property<bool>("CurrentWorkCheck");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserID");

                    b.HasKey("UserExperienceID");

                    b.HasIndex("CityID");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserPersonalDetail", b =>
                {
                    b.Property<int>("UserPersonalDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("CVImage");

                    b.Property<int>("CityID");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDOBPublic");

                    b.Property<bool>("IsEmailPublic");

                    b.Property<bool>("IsPhonePublic");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("Summary")
                        .HasMaxLength(300);

                    b.Property<string>("UserID");

                    b.HasKey("UserPersonalDetailID");

                    b.HasIndex("CityID");

                    b.ToTable("UserPersonalDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tech_In.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tech_In.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tech_In.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tech_In.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tech_In.Models.City", b =>
                {
                    b.HasOne("Tech_In.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAComment", b =>
                {
                    b.HasOne("Tech_In.Models.Database.UserQAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerUserQAnswerID");

                    b.HasOne("Tech_In.Models.Database.UserQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionUserQuestionID");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAnswer", b =>
                {
                    b.HasOne("Tech_In.Models.Database.UserQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserQAVoting", b =>
                {
                    b.HasOne("Tech_In.Models.Database.UserQAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerUserQAnswerID");

                    b.HasOne("Tech_In.Models.Database.UserQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionUserQuestionID");
                });

            modelBuilder.Entity("Tech_In.Models.Database.UserSkill", b =>
                {
                    b.HasOne("Tech_In.Models.Database.SkillTag", "SkillTag")
                        .WithMany()
                        .HasForeignKey("SkillTagID");
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserEducation", b =>
                {
                    b.HasOne("Tech_In.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserExperience", b =>
                {
                    b.HasOne("Tech_In.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tech_In.Models.Model.UserPersonalDetail", b =>
                {
                    b.HasOne("Tech_In.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
